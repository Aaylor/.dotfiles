#	Preprocessing

snippet def "#define ..."
#define ${1}
endsnippet

snippet ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}${0}
#endif
endsnippet

snippet inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet Inc "#include <> (Inc)"
#include <${1}.h>
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import string
	name = re.sub(r'[^A-Za-z0-9]_','_',snip.fn).upper()
	snip.rv = ('%s' % (name)).upper()
	snip.rv = re.sub(r'\.', '_', snip.rv)
else:
	snip.rv = snip.c`}
#define $1

${0}

#endif /* $1 */
endsnippet




# Type definition & Data type

snippet en "Enumeration"
enum ${1:name}
{
	$0	
};
endsnippet

snippet st "Structure"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}
{
	${0:/* data here */}
};
endsnippet

snippet un "Union"
union ${1:name}
{
	${0:/* data here */}
};
endsnippet

snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet



#	Control Statement

snippet for "for int loop (fori)"
for (${4:size_t} ${2:i} = ${5:0}; $2 < ${1:cout}; ${3:$2++})
{
	${0:/* code */}	
}
endsnippet

snippet do "do ... while(...)"
do
{
	${0:/* code */}
} while(${1:/* condition */});
endsnippet

snippet wh "while(...)"
while (${0:/* condition */})
{
	${1:/* code */}
}
endsnippet

snippet if "if ..."
if (${1:/* condition */})
{	
	${0:/* code */}
}
endsnippet

snippet elif
else if (${1:/* condition */})
{	
	${0:/* code */}
}
endsnippet

snippet else
else
{	
	${0:/* code */}
}
endsnippet



#	Printing

snippet fprintf "fprintf ..."
fprintf(${1:stdout}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet



#	Main functions

snippet main "int main(...)"
int main(int argc, const char **argv)
{
	${0:/* code */}
	return EXIT_SUCCESS;
}
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}(${3}) {
	${VISUAL}${0}
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet



#	Other
snippet sfork "forking..."
${1:pid} = fork();
if ($1 < 0) { /* error */
	perror("fork()");
	exit(EXIT_FAILURE);
}
else if (pid == 0) { /* son */
	${2:/* DO SOMETHING */}
}
else { /* father */
	${3:/* DO SOMETHING */}
}
endsnippet

snippet error "check error..."
${1:id} = ${2:what()};
if ($1 ${3:== -1}) {
	perror("$2");
	${4:exit(EXIT_FAILURE)};
}
endsnippet
